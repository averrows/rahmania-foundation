---
import { Image } from "astro:assets";

interface Props {
  title: string;
  description?: string;
  location: string;
  images: {
    src: ImageMetadata;
    alt: string;
  }[];
}

const { title, description, location, images } = Astro.props;
---

<div class="program-card flex flex-col md:flex-row w-full max-w-6xl bg-white rounded-lg shadow-lg overflow-hidden transition-all duration-300 ease-in-out transform hover:scale-105 group">
  <div class="relative w-full md:w-1/2 min-h-[250px]">
    {images.map((image, index) => (
      <Image
        src={image.src}
        alt={image.alt}
        class={`absolute inset-0 w-full h-full object-cover transition-opacity duration-500 ease-in-out ${
          index === 0 ? "opacity-100" : "opacity-0"
        }`}
        data-index={index}
      />
    ))}
  </div>
  <div class="p-8 flex flex-col justify-center w-full md:w-1/2">
    <h3 class="text-2xl font-semibold mb-4">{title}</h3>
    {description && (
      <p class="text-gray-600 mb-5 text-base">{description}</p>
    )}
    <p class="text-base text-gray-500 flex items-center">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5 mr-2"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
        />
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
        />
      </svg>
      <p class="text-gray-600 mb-5 text-base">{location}</p>
    </p>
  </div>
</div>

<script>
  function setupImageCarousel(card: HTMLElement) {
    const images = card.querySelectorAll("img");
    let currentIndex = 0;
    let interval: number;

    function showNextImage() {
      images[currentIndex].classList.remove("opacity-100");
      images[currentIndex].classList.add("opacity-0");
      currentIndex = (currentIndex + 1) % images.length;
      images[currentIndex].classList.remove("opacity-0");
      images[currentIndex].classList.add("opacity-100");
    }

    card.addEventListener("mouseenter", () => {
      if (images.length > 1) {
        interval = setInterval(showNextImage, 1500);
      }
    });

    card.addEventListener("mouseleave", () => {
      clearInterval(interval);
      images.forEach((img, index) => {
        img.classList.toggle("opacity-0", index !== 0);
        img.classList.toggle("opacity-100", index === 0);
      });
      currentIndex = 0;
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const cards = document.querySelectorAll(".program-card");
    cards.forEach((card) => setupImageCarousel(card as HTMLElement));
  });
</script>
